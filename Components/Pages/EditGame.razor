@page "/editgame"
@page "/editgame/{Id:int}"
@rendermode InteractiveServer

@inject NavigationManager navigationManager
@inject GamesClient gamesClient
@inject GenresClient genresClient

<PageTitle>@title</PageTitle>
<h3>@title</h3>
@if(genres.Count == 0 || gameDetails is null)
{
    <p><em>Loading......</em></p>
}
else
{
<div class="row">
    <div class="col-md-6">
<EditForm Model="@gameDetails" FormName="EditGame" OnValidSubmit="HandleSubmit">
  <DataAnnotationsValidator/>
  @* <ValidationSummary/> *@
  <div class="mb-3 form-group">
    <label for="name" class="form-label">Name:</label>
    <InputText id="name" class="form-control" @bind-Value="gameDetails.Name"/>
    <ValidationMessage For="() => gameDetails.Name"/>
  </div>
  <div class="mb-3 form-group">
    <label for="genre" class="form-label">Genre:</label>
    <InputSelect id="genre" class="form-select" @bind-Value="gameDetails.GenreId">
    <ValidationMessage For="() => gameDetails.GenreId"/>
        <option value="">Select a genre</option>
        @foreach(var genre in genres)
        {
            <option value="@genre.Id">@genre.Name</option>
        }
    </InputSelect>
  </div>
  <div class="mb-3 form-group">
    <label for="price" class="form-label">Price:</label>
    <InputNumber id="price" class="form-control" @bind-Value="gameDetails.Price"/>
    <ValidationMessage For="() => gameDetails.Price"/>
  </div>
  <div class="mb-3 form-group">
    <label for="releasedate" class="form-label">Release Date:</label>
    <InputDate id="releasedate" class="form-control" @bind-Value="gameDetails.ReleaseDate"/>
    <ValidationMessage For="() => gameDetails.ReleaseDate"/>
  </div>
  <div class="form-group mb-3 d-flex flex-row-reverse align-items-stretch justify-content-between">
  <button type="submit" class="btn btn-primary">Save</button>
  <a class="btn btn-secondary" role="button" href="/">Cancel</a>
  </div>
</EditForm>
</div>
</div>
}
@code {
    
    [Parameter]
    public int? Id {get;set;}
    [SupplyParameterFromForm]
    private GameDetails? gameDetails {get; set;}

    //private GenresClient genresClient = new();
    //private GamesClient gamesClient = new();

    private List<Genre> genres;
    private string title = string.Empty;

    protected override void OnInitialized()
    {
        genres = genresClient.GetGenres();
    }

    protected override void OnParametersSet()
    {
        if(gameDetails is not null)
        {
            return;
        }
        if(Id is null)
        {
            gameDetails = new()
            {
                Name = string.Empty,
                ReleaseDate = DateOnly.FromDateTime(DateTime.UtcNow)
            };
            title = $"New Game";
        }
        else
        {
            gameDetails = gamesClient.GetById(Id.Value);
            title = $"Edit {gameDetails.Name}";
        }
    }

    private void HandleSubmit()
    {
        ArgumentNullException.ThrowIfNull(gameDetails);

        if(Id is null)
        {
            gamesClient.AddGame(gameDetails);
        }
        else
        {
            gameDetails.Id = Id.Value;
            gamesClient.UpdateGame(gameDetails);
        }

        navigationManager.NavigateTo("/");
    }
}
